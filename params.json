{"name":"Nutor","tagline":"An editor for the Nu Programming language.","body":"# Nutor\r\n##A Nu Editor\r\n\r\nThis is an editor for the marvelous Nu programming language.\r\nSee Tim Burk's [programming.nu] (http://programming.nu) webseite for more information.\r\n\r\nThis was not supposed to be a finished work,\r\nmore a kind of demo for the NuCodeEditor class, \r\na subclass of NSTextView,\r\nbut it already works as a good Nu source code editor,\r\nwith the support of Apples native NSDocument class (version support)\r\nand extensibility by Nu itself.\r\n\r\nFeatures of the NuCodeEditor class are\r\n* syntax and parens highlighting\r\n* immediate auto indentation\r\n* easy and semi-automatic parentheses handling (\"smart parens\")\r\n* highlighting of syntax errors and exceptions\r\n* a simple auto completion mechanism\r\n* changing numeric values by dragging\r\n* editing colors values with th cocoa color panel\r\n* coloring of list levels (looks kind of weired)\r\n* presenting intemediate evaluation results within the source code (experimental)\r\n* \"live evaluation\": execution of code while still typing (see examples folder / also highly experimental)\r\n\r\nThere are some additions to the syntax of Nu,\r\nwhich are just experiments, some more, some less useful.\r\nI like the dot syntax very much, which basically works the same as in objective c 2.0.\r\nPress the help button in Nutor.app to see more of this.\r\nAlso there are some examples in the editor directory.\r\nThe header files give you some background information.\r\n\r\nSome of these experiments are inspired by live programming,\r\nnotabley promoted by Bret Victor (Inventing on principle) and \r\nChris Granger (light table).\r\n\r\n\r\n##The source\r\n\r\n####Parser.h/m\r\n\r\nAt some point I realized, that I couldn't get further with the current Nu parser:\r\nfor syntax coloring, debugging etc I needed a more tight connection between the source code and the parsed cells and objects.\r\nSo I've written this new parser.\r\nTechnically, every item in the source code, be it a list, a symbol or a string, has it's own parser object, an instance of a subclass of NuObjectParser, which connects its location in the code to the list cell, whose car is the parsed object.\r\n\r\nInitially not intended, I could implement an incrementally update mechanism: When a part of the source is changed (let's say a new character is typed in) just the affected part of the cell tree is reparsed. \r\n\r\nThese two mechanisms made it possible to build an editor  for large source strings, which could immediately react on changes and give the user an immediate feedback.\r\n\r\nParser.h/m should are just depnedent on Nu.m, so they should run on iOS too.\r\nThere are plans for an asynchronous remote parser based on this.\r\n\r\nCurrently the NutorParser replaces as a subclass of NuParser [Nu sharedParser] when included into a project.\r\n\r\n\r\n\r\n####Editor.h/m\r\nThe editor doesn't follow the exactly the MVC paradigm.\r\nThere are just extensions of the NSTextView and NSTextStorage base classes.\r\nNuSourceStorage is the subclass of NSTextStorage and represents the model layer,\r\nincluding an undo manager. The original undo manager\r\nof NSTextView didn't like programmatic text changes very well.\r\nAnd putting the undo manager to the model allows multiple instances of NSTextview \r\nfor one NSTextStorage.\r\n\r\nNuCodeEditor inherits from NSTextView and implements a lot of controller functionalities,\r\nlike the original NSTextView class too (The view stuff is mostly handled in NSLayoutManager and NSTextContainer).\r\nMost of the nu files extend the functionality fo NuCodeEditor.\r\nSee \"editor.nu\" for the loaded files.\r\n\r\nEditor.h/m are dependent on the Parser.h/m and on GCUndoManager,\r\na NSUndoManager replacement written by Graham Cox.\r\nI've put this in an extra framework, because GCUndoManager is not compiled with ARC.\r\n\r\n\r\n####Debugger.h/m\r\nWell this is not a Debugger yet, but there are some nasty hacks to implement a step debugger later.\r\nIt is used here to get intermediate evaluation results.\r\nSee the files in the examples folder.\r\n\r\n\r\n####Nu.h/m\r\nThis is the Nu \"rundtime\".\r\nIt is incoluded here, for two reasons:\r\n1. to compile a standalone executable without dependencies.\r\n2. though I didn't like that, I had to change 2 lines to get this \"result inlining\" thing working in all circumstances (well almost).\r\nBut everything should work fine with the original Nu.h/m which Tim Burks provides in his repository.\r\n\r\n\r\n####Document.h/m\r\nHere is all the code to get the app working.\r\nAgain, all the window controller code is in the\r\nNutorDocument class. \r\nAlso the NutorDocument class got extended in some nu files.\r\nSee document.nu.\r\n\r\n\r\n##So What ...\r\n####what's missing\r\n* auto completion is just dumb.\r\nBut it is not trivial to make it better, but there are several possibilities. See completions.nu for more information.\r\n* the UI of the editor could be more consistent\r\n* NSPopover instead of the error messages text field\r\n* more conveniance functions ...\r\n* memory management\r\n* finding bugs\r\n\r\n####what could a future IDE look like\r\n* The next step towards a kind of IDE would be a remote parser, which could also work asynchronously in parallel to the editor parser on a client app, which could also run on iOS.\r\n* From there I could implement a real debugger with breakpoints etc., which displays information in the editor.\r\n* Finally I imagine an IDE, where the source code is not just organized in files, but in smaller chunks like single function or method definitions. These could be ordered by tags, where every chunk could have more than one of them:\r\nOne tag for the class, one for the file, one for an informal protocol which is implemented, one for tests, one for a certain functionality and so on.\r\nSo these chunks could be grouped together as currently needed and mixed with tests or be just command line kind of \"chunks\" to try out certain things, which could get easily deleted when they are not needed anymore.\r\nThis would more reflect the workflow for coding, at least mine.\r\n\r\n####what could be done\r\nFeel free to fork and build your own IDE,\r\nI am curious to see your ideas.\r\nIf you'd like to contribute, there are a lot of possibilities, as you can easily see.\r\n\r\ncontact: heiko.henrich@gmail.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}